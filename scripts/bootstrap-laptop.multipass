#!/bin/bash
set -e

# Script to bootstrap a k3s-based demo environment on a laptop using Multipass
# Sets up k3s, Kamaji, ArgoCD, Crossplane, Sveltos, and (optionally) MetalLB
# Cleans up existing VM to ensure a fresh start

# Configuration
VM_NAME="demo-k3s"
K3S_KUBECONFIG="$HOME/.kube/config-demo-k3s"
VERSIONS=(
  "cert-manager:v1.14.5"
  "kamaji:v0.2.0"
  "crossplane:v1.16.0"
  "sveltos:v0.36.0"
  "metallb:v0.14.5"
)
METALLB_ENABLED=false # Set to true to enable MetalLB
METALLB_IP_RANGE="192.168.1.220-192.168.1.230" # Adjust to your LAN

# Logging function
log() { echo "📢 $1"; }
error() { echo "🔴 ERROR: $1" >&2; exit 1; }
wait_for_resource() {
  log "⏳ Waiting for $1 readiness (timeout: $3)..."
  kubectl wait --for=condition=$2 $1 --timeout=$3 || error "Timeout waiting for $1"
}

# Check prerequisites
check_prerequisites() {
  log "Checking prerequisites..."
  for cmd in brew multipass helm jq; do
    command_exists $cmd || error "$cmd not found. Install with: brew install $cmd"
  done
  log "✅ All prerequisites installed."
}

command_exists() { command -v "$1" >/dev/null 2>&1; }

# Clean up existing VM and kubeconfig
cleanup_vm() {
  log "Cleaning up existing VM '$VM_NAME' and kubeconfig..."
  if multipass info "$VM_NAME" &>/dev/null; then
    log "Stopping and deleting VM '$VM_NAME'..."
    multipass stop --force "$VM_NAME" || log "Failed to stop VM, proceeding with deletion"
    multipass delete "$VM_NAME" || log "Failed to delete VM, proceeding with purge"
    multipass purge || error "Failed to purge Multipass VMs"
  fi
  if [ -f "$K3S_KUBECONFIG" ]; then
    log "Removing old kubeconfig '$K3S_KUBECONFIG'..."
    rm -f "$K3S_KUBECONFIG" || error "Failed to remove kubeconfig"
  fi
  log "✅ Cleanup complete."
}

# Create Multipass VM
setup_vm() {
  log "Creating new VM '$VM_NAME' (4 CPUs, 8GB RAM, 50GB Disk)..."
  multipass launch --name "$VM_NAME" --cpus 4 --memory 8G --disk 50G || error "Failed to create VM"
}

# Install k3s
install_k3s() {
  log "Installing k3s (without Traefik)..."
  multipass exec "$VM_NAME" -- bash -c "curl -sfL https://get.k3s.io | sh -s - --disable traefik"
  wait_for_resource "node --all" "Ready" "120s"
}

# Configure kubeconfig
setup_kubeconfig() {
  log "Configuring local kubeconfig..."
  multipass exec "$VM_NAME" -- sudo cat /etc/rancher/k3s/k3s.yaml > "$K3S_KUBECONFIG"
  K3S_VM_IP=$(multipass info "$VM_NAME" --format json | jq -r '.info["'$VM_NAME'"].ipv4[0]')
  sed -i '' "s/127.0.0.1/$K3S_VM_IP/" "$K3S_KUBECONFIG"
  export KUBECONFIG="$K3S_KUBECONFIG"
  kubectl get nodes || error "Failed to access k3s cluster"
}

# Install cert-manager
install_cert_manager() {
  log "Installing cert-manager..."
  helm repo add jetstack https://charts.jetstack.io --force-update
  helm upgrade --install cert-manager jetstack/cert-manager \
    --namespace cert-manager --create-namespace \
    --version ${VERSIONS[0]##*:} --set installCRDs=true || error "Failed to install cert-manager"
  wait_for_resource "deploy/cert-manager -n cert-manager" "Available=True" "120s"
}

# Install Kamaji
install_kamaji() {
  log "Installing Kamaji..."
  helm repo add clastix https://clastix.github.io/charts --force-update
  helm upgrade --install kamaji clastix/kamaji \
    --namespace kamaji-system --create-namespace \
    --version ${VERSIONS[1]##*:} || error "Failed to install Kamaji"
  wait_for_resource "deployment/kamaji -n kamaji-system" "Available=True" "120s"
}

# Install ArgoCD
install_argocd() {
  log "Installing ArgoCD..."
  kubectl create ns argocd --dry-run=client -o yaml | kubectl apply -f - >/dev/null
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || error "Failed to install ArgoCD"
  wait_for_resource "deploy/argocd-server -n argocd" "Available=True" "120s"
  kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}' || error "Failed to expose ArgoCD"
}

# Install Crossplane
install_crossplane() {
  log "Installing Crossplane..."
  helm repo add crossplane-stable https://charts.crossplane.io/stable --force-update
  helm upgrade --install crossplane crossplane-stable/crossplane \
    --namespace crossplane-system --create-namespace \
    --version ${VERSIONS[2]##*:} || error "Failed to install Crossplane"
  # Install a minimal provider for testing
  kubectl apply -f - <<EOF
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-nopresource
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-nopresource:v0.2.2
EOF
}

# Install Sveltos
install_sveltos() {
  log "Installing Sveltos..."
  helm repo add projectsveltos https://projectsveltos.github.io/helm-charts --force-update
  helm upgrade --install projectsveltos projectsveltos/projectsveltos \
    --namespace projectsveltos --create-namespace \
    --version ${VERSIONS[3]##*:} --set agent.managementCluster=true || error "Failed to install Sveltos"
}

# Install MetalLB (optional)
install_metallb() {
  if [ "$METALLB_ENABLED" = true ]; then
    log "Installing MetalLB..."
    helm repo add metallb https://metallb.github.io/metallb --force-update
    helm upgrade --install metallb metallb/metallb \
      --namespace metallb-system --create-namespace \
      --version ${VERSIONS[4]##*:} || error "Failed to install MetalLB"
    wait_for_resource "deploy/metallb-controller -n metallb-system" "Available=True" "120s"
    kubectl apply -f - <<EOF
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: local-pool
  namespace: metallb-system
spec:
  addresses:
  - $METALLB_IP_RANGE
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: local-l2
  namespace: metallb-system
EOF
  else
    log "Skipping MetalLB installation (METALLB_ENABLED=false)"
  fi
}

# Main execution
read -p "🚀 Bootstrap k3s demo environment on VM '$VM_NAME'? This will delete any existing VM. (y/N) " confirm
[[ "$confirm" =~ ^[Yy]$ ]] || error "Setup cancelled."
check_prerequisites
cleanup_vm
setup_vm
install_k3s
setup_kubeconfig
install_cert_manager
install_kamaji
install_argocd
install_crossplane
install_sveltos
install_metallb

# Display results
ARGO_NODEPORT=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.port==443)].nodePort}')
MULTIPASS_VM_IP=$(multipass info "$VM_NAME" --format json | jq -r '.info["'$VM_NAME'"].ipv4[0]')

log ""
log "======================================"
log "🎯 K3s Demo Bootstrap Successful"
log "======================================"
log "🔑 ArgoCD URL: https://$MULTIPASS_VM_IP:$ARGO_NODEPORT"
log "📌 Username: admin"
log "🔑 Password: Run 'kubectl -n argocd get secrets argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d'"
log "✅ Add to ~/.zshrc or ~/.bash_profile:"
log "export KUBECONFIG=$K3S_KUBECONFIG"
log ""
log "🚀 Installation Complete!"
log "📋 Installed Versions:"
for v in "${VERSIONS[@]}"; do
  log "  ${v%%:*}: ${v##*:}"
done